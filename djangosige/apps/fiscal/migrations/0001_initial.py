# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2017-06-25 17:50
from __future__ import unicode_literals

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djangosige.apps.fiscal.models.nota_fiscal


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('vendas', '0001_initial'),
        ('cadastro', '0001_initial'),
        ('compras', '0002_auto_20170625_1450'),
    ]

    operations = [
        migrations.CreateModel(
            name='AutXML',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('cpf_cnpj', models.CharField(blank=True, max_length=32, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='COFINS',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('cst', models.CharField(blank=True, choices=[('01', '01 - Operação Tributável com Alíquota Básica'), ('02', '02 - Operação Tributável com Alíquota Diferenciada'), ('03', '03 - Operação Tributável com Alíquota por Unidade de Medida de Produto'), ('04', '04 - Operação Tributável Monofásica - Revenda a Alíquota Zero'), ('05', '05 - Operação Tributável por Substituição Tributária'), ('06', '06 - Operação Tributável a Alíquota Zero'), ('07', '07 - Operação Isenta da Contribuição'), ('08', '08 - Operação sem Incidência da Contribuição'), ('09', '09 - Operação com Suspensão da Contribuição'), ('49', '49 - Outras Operações de Saída'), ('50', '50 - Operação com Direito a Crédito - Vinculada Exclusivamente a Receita Tributada no Mercado Interno'), ('51', '51 - Operação com Direito a Crédito - Vinculada Exclusivamente a Receita Não-Tributada no Mercado Interno'), ('52', '52 - Operação com Direito a Crédito - Vinculada Exclusivamente a Receita de Exportação'), ('53', '53 - Operação com Direito a Crédito - Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno'), ('54', '54 - Operação com Direito a Crédito - Vinculada a Receitas Tributadas no Mercado Interno e de Exportação'), ('55', '55 - Operação com Direito a Crédito - Vinculada a Receitas Não Tributadas no Mercado Interno e de Exportação'), ('56', '56 - Operação com Direito a Crédito - Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno e de Exportação'), (
                    '60', '60 - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita Tributada no Mercado Interno'), ('61', '61 - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita Não-Tributada no Mercado Interno'), ('62', '62 - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita de Exportação'), ('63', '63 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno'), ('64', '64 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas no Mercado Interno e de Exportação'), ('65', '65 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação'), ('66', '66 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno e de Exportação'), ('67', '67 - Crédito Presumido - Outras Operações'), ('70', '70 - Operação de Aquisição sem Direito a Crédito'), ('71', '71 - Operação de Aquisição com Isenção'), ('72', '72 - Operação de Aquisição com Suspensão'), ('73', '73 - Operação de Aquisição a Alíquota Zero'), ('74', '74 - Operação de Aquisição sem Incidência da Contribuição'), ('75', '75 - Operação de Aquisição por Substituição Tributária'), ('98', '98 - Outras Operações de Entrada'), ('99', '99 - Outras Operações')], max_length=2, null=True)),
                ('p_cofins', models.DecimalField(blank=True, decimal_places=2, max_digits=5,
                                                 null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('valiq_cofins', models.DecimalField(blank=True, decimal_places=2, max_digits=13,
                                                     null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
            ],
        ),
        migrations.CreateModel(
            name='ConfiguracaoNotaFiscal',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('arquivo_certificado_a1', models.FileField(
                    blank=True, null=True, upload_to='arquivos/certificado/')),
                ('senha_certificado', models.CharField(
                    blank=True, max_length=255, null=True)),
                ('serie_atual', models.CharField(default='101', max_length=3)),
                ('ambiente', models.CharField(choices=[
                 ('1', 'Produção'), ('2', 'Homologação')], default='2', max_length=1)),
                ('imp_danfe', models.CharField(choices=[('0', 'Sem geração de DANFE'), ('1', 'DANFE normal, Retrato'), (
                    '2', 'DANFE normal, Paisagem'), ('4', 'DANFE NFC-e')], default='1', max_length=1)),
                ('inserir_logo_danfe', models.BooleanField(default=True)),
                ('orientacao_logo_danfe', models.CharField(choices=[
                 ('H', 'Horizontal'), ('V', 'Vertical')], default='H', max_length=1)),
                ('csc', models.CharField(blank=True, max_length=64, null=True)),
                ('cidtoken', models.CharField(blank=True, max_length=8, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ErrosValidacaoNotaFiscal',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(blank=True, choices=[
                 ('0', 'Erro'), ('1', 'Alerta')], max_length=1, null=True)),
                ('descricao', models.CharField(
                    blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GrupoFiscal',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=255)),
                ('regime_trib', models.CharField(choices=[
                 ('0', 'Tributação Normal'), ('1', 'Simples Nacional')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='ICMS',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('cst', models.CharField(choices=[('00', '00 - Tributada integralmente'), ('10', '10 - Tributada e com cobrança do ICMS por substituição tributária'), ('10p', '10 - Tributada e com cobrança do ICMS por substituição tributária (com partilha do ICMS)'), ('20', '20 - Com redução de base de cálculo.'), ('30', '30 - Isenta ou não tributada e com cobrança do ICMS por substituição tributária'), ('40', '40 - Isenta'), ('41', '41 - Não tributada'), ('41r',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             '41 - Não tributada ( ICMS ST devido para a UF de destino, nas operações interestaduais de produtos que tiveram retenção antecipada de ICMS por ST na UF do remetente)'), ('50', '50 - Suspensão'), ('51', '51 - Diferimento'), ('60', '60 - Cobrado anteriormente por substituição tributária'), ('70', '70 - Com redução de base de cálculo e cobrança do ICMS por substituição tributária'), ('90p', '90 - Outros (com partilha do ICMS)'), ('90', '90 -  Outros')], help_text='icms-cst', max_length=3)),
                ('mod_bc', models.CharField(choices=[('0', '0 - Margem Valor Agregado (%)'), ('1', '1 - Pauta (Valor)'), ('2', '2 - Preço Tabelado Máx. (valor)'), (
                    '3', '3 - Valor da operação')], default='3', help_text='icms00 icms10 icms20 icms51 icms70 icms90 icms10p icms90p', max_length=1)),
                ('p_icms', models.DecimalField(blank=True, decimal_places=2, help_text='icms00 icms10 icms20 icms51 icms70 icms90 icms10p icms90p',
                                               max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('p_red_bc', models.DecimalField(blank=True, decimal_places=2, help_text='icms20 icms51 icms70 icms90 icms10p icms90p',
                                                 max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('mod_bcst', models.CharField(choices=[('0', '0 - Preço tabelado ou máximo sugerido'), ('1', '1 - Lista Negativa (valor)'), ('2', '2 - Lista Positiva (valor)'), (
                    '3', '3 - Lista Neutra (valor)'), ('4', '4 - Margem Valor Agregado (%)'), ('5', '5 - Pauta (valor)')], default='4', help_text='icms10 icms30 icms70 icms90 icms10p icms90p', max_length=1)),
                ('p_mvast', models.DecimalField(blank=True, decimal_places=2, help_text='icms10 icms30 icms70 icms90 icms10p icms90p',
                                                max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('p_red_bcst', models.DecimalField(blank=True, decimal_places=2, help_text='icms10 icms30 icms70 icms90 icms10p icms90p',
                                                   max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('p_icmsst', models.DecimalField(blank=True, decimal_places=2, help_text='icms10 icms30 icms70 icms90 icms10p icms90p',
                                                 max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('mot_des_icms', models.CharField(blank=True, choices=[('1', '1 - Táxi'), ('3', '3 - Produtor Agropecuário'), ('4', '4 - Frotista/Locadora'), ('5', '5 - Diplomático/Consular'), ('6', '6 - Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio'), ('7', '7 - SUFRAMA'), (
                    '8', '8 - Venda a Órgão Público'), ('9', '9 - Outros'), ('10', '10 - Deficiente Condutor'), ('11', '11 - Deficiente Não Condutor'), ('12', '12 - Órgão de fomento e desenvolvimento agropecuário'), ('16', '16 - Olimpíadas Rio 2016')], help_text='icms20 icms30 icms40 icms41 icms50 icms70 icms90', max_length=3, null=True)),
                ('p_dif', models.DecimalField(blank=True, decimal_places=2, help_text='icms51', max_digits=6,
                                              null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('p_bc_op', models.DecimalField(blank=True, decimal_places=2, help_text='icms10p icms90p',
                                                max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('ufst', models.CharField(blank=True, choices=[('AC', 'AC'), ('AL', 'AL'), ('AP', 'AP'), ('AM', 'AM'), ('BA', 'BA'), ('CE', 'CE'), ('DF', 'DF'), ('ES', 'ES'), ('EX', 'EX'), ('GO', 'GO'), ('MA', 'MA'), ('MT', 'MT'), ('MS', 'MS'), ('MG', 'MG'), (
                    'PA', 'PA'), ('PB', 'PB'), ('PR', 'PR'), ('PE', 'PE'), ('PI', 'PI'), ('RJ', 'RJ'), ('RN', 'RN'), ('RS', 'RS'), ('RO', 'RO'), ('RR', 'RR'), ('SC', 'SC'), ('SP', 'SP'), ('SE', 'SE'), ('TO', 'TO')], help_text='icms10p icms90p', max_length=2, null=True)),
                ('icms_incluido_preco', models.BooleanField(
                    default=False, help_text='calculo-icms')),
                ('icmsst_incluido_preco', models.BooleanField(
                    default=False, help_text='calculo-icms')),
                ('grupo_fiscal', models.ForeignKey(blank=True, null=True,
                                                   on_delete=django.db.models.deletion.CASCADE, related_name='icms_padrao', to='fiscal.GrupoFiscal')),
            ],
        ),
        migrations.CreateModel(
            name='ICMSSN',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('csosn', models.CharField(choices=[('101', '101 - Tributada  com permissão de crédito'), ('102', '102 - Tributada sem permissão de crédito'), ('103', '103 - Isenção do ICMS para faixa de receita bruta'), ('201', '201 - Tributada com permissão de crédito e com cobrança do ICMS por Substituição Tributária'), ('202', '202 - Tributada sem permissão de crédito e com cobrança do ICMS por Substituição Tributária'),
                                                    ('203', '203 - Isenção do ICMS para faixa de receita bruta e com cobrança do ICMS por Substituição Tributária'), ('300', '300 - Imune'), ('400', '400 - Não tributada'), ('500', '500 - ICMS cobrado anteriormente por substituição tributária (substituído) ou por antecipação.'), ('900', '900 - Outros')], help_text='icmssn-csosn', max_length=3)),
                ('p_cred_sn', models.DecimalField(blank=True, decimal_places=2, help_text='icmssn101 icmssn201 icmssn900',
                                                  max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('mod_bc', models.CharField(choices=[('0', '0 - Margem Valor Agregado (%)'), ('1', '1 - Pauta (Valor)'), (
                    '2', '2 - Preço Tabelado Máx. (valor)'), ('3', '3 - Valor da operação')], default='3', help_text='icmssn900', max_length=1)),
                ('mod_bcst', models.CharField(choices=[('0', '0 - Preço tabelado ou máximo sugerido'), ('1', '1 - Lista Negativa (valor)'), ('2', '2 - Lista Positiva (valor)'), (
                    '3', '3 - Lista Neutra (valor)'), ('4', '4 - Margem Valor Agregado (%)'), ('5', '5 - Pauta (valor)')], default='4', help_text='icmssn201 icmssn202 icmssn203 icmssn900', max_length=1)),
                ('p_mvast', models.DecimalField(blank=True, decimal_places=2, help_text='icmssn201 icmssn202 icmssn203 icmssn900',
                                                max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('p_red_bcst', models.DecimalField(blank=True, decimal_places=2, help_text='icmssn201 icmssn202 icmssn203 icmssn900',
                                                   max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('p_icmsst', models.DecimalField(blank=True, decimal_places=2, help_text='icmssn201 icmssn202 icmssn203 icmssn900',
                                                 max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('p_red_bc', models.DecimalField(blank=True, decimal_places=2, help_text='icmssn201 icmssn202 icmssn203 icmssn900',
                                                 max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('p_icms', models.DecimalField(blank=True, decimal_places=2, help_text='icmssn201 icmssn202 icmssn203 icmssn900',
                                               max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('icmssn_incluido_preco', models.BooleanField(
                    default=False, help_text='calculo-icmssn')),
                ('icmssnst_incluido_preco', models.BooleanField(
                    default=False, help_text='calculo-icmssn')),
                ('grupo_fiscal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                   related_name='icms_sn_padrao', to='fiscal.GrupoFiscal')),
            ],
        ),
        migrations.CreateModel(
            name='ICMSUFDest',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('p_fcp_dest', models.DecimalField(blank=True, decimal_places=2, max_digits=6,
                                                   null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('p_icms_dest', models.DecimalField(blank=True, decimal_places=2, max_digits=6,
                                                    null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('p_icms_inter', models.DecimalField(blank=True, choices=[(Decimal('4.00'), '4% alíquota interestadual para produtos importados'), (Decimal('7.00'), '7% para os Estados de origem do Sul e Sudeste (exceto ES), destinado para os Estados do Norte, Nordeste, CentroOeste e Espírito Santo'), (Decimal(
                    '12.00'), '12% para os demais casos')], decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('p_icms_inter_part', models.DecimalField(blank=True, choices=[(Decimal('40.00'), '40% em 2016'), (Decimal('60.00'), '60% em 2017'), (Decimal('80.00'), '80% em 2018'), (Decimal(
                    '100.00'), '100% a partir de 2019')], decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('grupo_fiscal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                   related_name='icms_dest_padrao', to='fiscal.GrupoFiscal')),
            ],
        ),
        migrations.CreateModel(
            name='IPI',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('cst', models.CharField(blank=True, choices=[('00', '00 - Entrada com Recuperação de Crédito'), ('01', '01 - Entrada Tributável com Alíquota Zero'), ('02', '02 - Entrada Isenta'), ('03', '03 - Entrada Não-Tributada'), ('04', '04 - Entrada Imune'), ('05', '05 - Entrada com Suspensão'), (
                    '49', '49 - Outras Entradas'), ('50', '50 - Saída Tributada'), ('51', '51 - Saída Tributável com Alíquota Zero'), ('52', '52 - Saída Isenta'), ('53', '53 - Saída Não-Tributada'), ('54', '54 - Saída Imune'), ('55', '55 - Saída com Suspensão'), ('99', '99 - Outras Saídas')], max_length=2, null=True)),
                ('cl_enq', models.CharField(blank=True, max_length=5, null=True)),
                ('c_enq', models.CharField(blank=True, max_length=3, null=True)),
                ('cnpj_prod', models.CharField(blank=True, max_length=32, null=True)),
                ('tipo_ipi', models.CharField(choices=[('0', 'Não sujeito ao IPI'), (
                    '1', 'Valor fixo'), ('2', 'Alíquota')], default='2', max_length=1)),
                ('p_ipi', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True,
                                              validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('valor_fixo', models.DecimalField(blank=True, decimal_places=2, max_digits=13,
                                                   null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('ipi_incluido_preco', models.BooleanField(
                    default=False, help_text='calculo-ipi')),
                ('incluir_bc_icms', models.BooleanField(
                    default=False, help_text='calculo-ipi')),
                ('incluir_bc_icmsst', models.BooleanField(
                    default=False, help_text='calculo-ipi')),
                ('grupo_fiscal', models.ForeignKey(blank=True, null=True,
                                                   on_delete=django.db.models.deletion.CASCADE, related_name='ipi_padrao', to='fiscal.GrupoFiscal')),
            ],
        ),
        migrations.CreateModel(
            name='NaturezaOperacao',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('cfop', models.CharField(max_length=5)),
                ('descricao', models.CharField(
                    blank=True, max_length=255, null=True)),
                ('tp_operacao', models.CharField(blank=True, choices=[
                 ('0', '0 - Entrada'), ('1', '1 - Saída')], max_length=1, null=True)),
                ('id_dest', models.CharField(blank=True, choices=[
                 ('1', '1 - Operação interna'), ('2', '2 - Operação interestadual'), ('3', '3 - Operação com exterior')], max_length=1, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NotaFiscal',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('chave', models.CharField(max_length=44)),
                ('versao', models.CharField(choices=[
                 ('3.10', 'v3.10')], default='3.10', max_length=4)),
                ('natop', models.CharField(max_length=60)),
                ('indpag', models.CharField(choices=[
                 ('0', 'Pagamento à vista'), ('1', 'Pagamento a prazo'), ('2', 'Outros')], max_length=1)),
                ('mod', models.CharField(choices=[
                 ('55', 'NF-e (55)'), ('65', 'NFC-e (65)')], default='55', max_length=2)),
                ('serie', models.CharField(max_length=3)),
                ('dhemi', models.DateTimeField()),
                ('dhsaient', models.DateTimeField(blank=True, null=True)),
                ('iddest', models.CharField(choices=[('1', 'Operação interna'), (
                    '2', 'Operação interestadual'), ('3', 'Operação com exterior')], max_length=1)),
                ('tp_imp', models.CharField(choices=[('0', 'Sem geração de DANFE'), ('1', 'DANFE normal, Retrato'), (
                    '2', 'DANFE normal, Paisagem'), ('4', 'DANFE NFC-e')], max_length=1)),
                ('tp_emis', models.CharField(choices=[
                 ('1', 'Emissão normal'), ('2', 'Emissão em contingência')], default='1', max_length=1)),
                ('tp_amb', models.CharField(choices=[
                 ('1', 'Produção'), ('2', 'Homologação')], max_length=1)),
                ('fin_nfe', models.CharField(choices=[('1', 'NF-e normal'), ('2', 'NF-e complementar'), (
                    '3', 'NF-e de ajuste'), ('4', 'Devolução de mercadoria')], default='1', max_length=1)),
                ('ind_final', models.CharField(choices=[
                 ('0', '0 - Não'), ('1', '1 - Sim')], default='0', max_length=1)),
                ('ind_pres', models.CharField(choices=[('0', 'Não se aplica'), ('1', 'Operação presencial'), ('2', 'Operação não presencial, pela Internet'), (
                    '3', 'Operação não presencial, Teleatendimento'), ('4', 'NFC-e em operação com entrega a domicílio'), ('9', 'Operação não presencial, outros.')], default='0', max_length=1)),
                ('inf_ad_fisco', models.CharField(
                    blank=True, max_length=2000, null=True)),
                ('inf_cpl', models.CharField(blank=True, max_length=5000, null=True)),
                ('status_nfe', models.CharField(choices=[('0', 'Assinada'), ('1', 'Autorizada'), ('2', 'Denegada'), ('3', 'Em Digitação'), (
                    '4', 'Em Processamento na SEFAZ'), ('5', 'Rejeitada'), ('6', 'Validada'), ('7', 'Pendente'), ('8', 'Cancelada'), ('9', 'Importada por XML')], max_length=1)),
                ('arquivo_proc', models.FileField(blank=True, max_length=2055, null=True,
                                                  upload_to=djangosige.apps.fiscal.models.nota_fiscal.arquivo_proc_path)),
                ('numero_lote', models.CharField(
                    blank=True, max_length=16, null=True)),
                ('numero_protocolo', models.CharField(
                    blank=True, max_length=16, null=True)),
                ('just_canc', models.CharField(
                    blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PIS',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('cst', models.CharField(blank=True, choices=[('01', '01 - Operação Tributável com Alíquota Básica'), ('02', '02 - Operação Tributável com Alíquota Diferenciada'), ('03', '03 - Operação Tributável com Alíquota por Unidade de Medida de Produto'), ('04', '04 - Operação Tributável Monofásica - Revenda a Alíquota Zero'), ('05', '05 - Operação Tributável por Substituição Tributária'), ('06', '06 - Operação Tributável a Alíquota Zero'), ('07', '07 - Operação Isenta da Contribuição'), ('08', '08 - Operação sem Incidência da Contribuição'), ('09', '09 - Operação com Suspensão da Contribuição'), ('49', '49 - Outras Operações de Saída'), ('50', '50 - Operação com Direito a Crédito - Vinculada Exclusivamente a Receita Tributada no Mercado Interno'), ('51', '51 - Operação com Direito a Crédito - Vinculada Exclusivamente a Receita Não-Tributada no Mercado Interno'), ('52', '52 - Operação com Direito a Crédito - Vinculada Exclusivamente a Receita de Exportação'), ('53', '53 - Operação com Direito a Crédito - Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno'), ('54', '54 - Operação com Direito a Crédito - Vinculada a Receitas Tributadas no Mercado Interno e de Exportação'), ('55', '55 - Operação com Direito a Crédito - Vinculada a Receitas Não Tributadas no Mercado Interno e de Exportação'), ('56', '56 - Operação com Direito a Crédito - Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno e de Exportação'), (
                    '60', '60 - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita Tributada no Mercado Interno'), ('61', '61 - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita Não-Tributada no Mercado Interno'), ('62', '62 - Crédito Presumido - Operação de Aquisição Vinculada Exclusivamente a Receita de Exportação'), ('63', '63 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno'), ('64', '64 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas no Mercado Interno e de Exportação'), ('65', '65 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação'), ('66', '66 - Crédito Presumido - Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno e de Exportação'), ('67', '67 - Crédito Presumido - Outras Operações'), ('70', '70 - Operação de Aquisição sem Direito a Crédito'), ('71', '71 - Operação de Aquisição com Isenção'), ('72', '72 - Operação de Aquisição com Suspensão'), ('73', '73 - Operação de Aquisição a Alíquota Zero'), ('74', '74 - Operação de Aquisição sem Incidência da Contribuição'), ('75', '75 - Operação de Aquisição por Substituição Tributária'), ('98', '98 - Outras Operações de Entrada'), ('99', '99 - Outras Operações')], max_length=2, null=True)),
                ('p_pis', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True,
                                              validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('valiq_pis', models.DecimalField(blank=True, decimal_places=2, max_digits=13,
                                                  null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('grupo_fiscal', models.ForeignKey(blank=True, null=True,
                                                   on_delete=django.db.models.deletion.CASCADE, related_name='pis_padrao', to='fiscal.GrupoFiscal')),
            ],
        ),
        migrations.CreateModel(
            name='RespostaSefazNotaFiscal',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(blank=True, choices=[('0', 'Erro'), ('1', 'Resultado do processamento'), (
                    '2', 'Rejeição'), ('3', 'Motivo denegação'), ('4', 'Alerta')], max_length=1, null=True)),
                ('codigo', models.CharField(blank=True, max_length=3, null=True)),
                ('descricao', models.CharField(
                    blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NotaFiscalEntrada',
            fields=[
                ('notafiscal_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE,
                                                        parent_link=True, primary_key=True, serialize=False, to='fiscal.NotaFiscal')),
                ('n_nf_entrada', models.CharField(max_length=9, validators=[
                 django.core.validators.RegexValidator('^\\d{1,10}$')])),
                ('compra', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                             related_name='compra_nfe', to='compras.PedidoCompra')),
                ('dest_entrada', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                   related_name='dest_nfe_entrada', to='cadastro.Empresa')),
                ('emit_entrada', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                   related_name='emit_nfe_entrada', to='cadastro.Fornecedor')),
            ],
            bases=('fiscal.notafiscal',),
        ),
        migrations.CreateModel(
            name='NotaFiscalSaida',
            fields=[
                ('notafiscal_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE,
                                                        parent_link=True, primary_key=True, serialize=False, to='fiscal.NotaFiscal')),
                ('tpnf', models.CharField(choices=[
                 ('0', 'Entrada'), ('1', 'Saída')], default='1', max_length=1)),
                ('n_nf_saida', models.CharField(max_length=9, unique=True, validators=[
                 django.core.validators.RegexValidator('^\\d{1,10}$')])),
                ('n_fat', models.CharField(blank=True,
                                           max_length=60, null=True, unique=True)),
                ('v_orig', models.DecimalField(blank=True, decimal_places=2, max_digits=13,
                                               null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('v_desc', models.DecimalField(blank=True, decimal_places=2, max_digits=13,
                                               null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('v_liq', models.DecimalField(blank=True, decimal_places=2, max_digits=13,
                                              null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('grupo_cobr', models.BooleanField(default=True)),
                ('dest_saida', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                 related_name='dest_nfe_saida', to='cadastro.Cliente')),
                ('emit_saida', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                 related_name='emit_nfe_saida', to='cadastro.Empresa')),
                ('venda', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                            related_name='venda_nfe', to='vendas.PedidoVenda')),
            ],
            bases=('fiscal.notafiscal',),
        ),
        migrations.AddField(
            model_name='cofins',
            name='grupo_fiscal',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='cofins_padrao', to='fiscal.GrupoFiscal'),
        ),
        migrations.AddField(
            model_name='respostasefaznotafiscal',
            name='nfe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    related_name='erros_nfe_sefaz', to='fiscal.NotaFiscalSaida'),
        ),
        migrations.AddField(
            model_name='errosvalidacaonotafiscal',
            name='nfe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    related_name='erros_nfe', to='fiscal.NotaFiscalSaida'),
        ),
        migrations.AddField(
            model_name='autxml',
            name='nfe',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    related_name='aut_xml', to='fiscal.NotaFiscalSaida'),
        ),
    ]
